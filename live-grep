#!/bin/bash

set -e

# Configuration
VERSION="0.1.0"
PREVIEW_CONTEXT=2
LINE_NUMBER=false

# Check required dependencies
check_dependencies() {
    local missing=()
    for cmd in fzf rg bat; do
        if ! command -v "$cmd" &> /dev/null; then
            missing+=("$cmd")
        fi
    done

    if [ ${#missing[@]} -ne 0 ]; then
        echo "Error: Required commands not found: ${missing[*]}" >&2
        echo "Please install missing dependencies and try again." >&2
        exit 1
    fi
}

# Display help message
show_help() {
    cat << EOF
live-grep $VERSION
Interactive command-line tool for real-time file content search

Usage: live-grep [options] [paths...]

Options:
    -p, --pattern PATTERN    File pattern to search (e.g., "*.rs")
    -d, --depth DEPTH       Maximum search depth
    -c, --context LINES     Number of context lines in preview (default: 2)
    -e, --exclude PATTERN   Exclude pattern
    -n, --line-number      Output file path with line number (e.g., file:80)
    -h, --help             Show this help message
    -v, --version          Show version

Examples:
    live-grep                          # Search in current directory
    live-grep -p "*.rs" src/           # Search Rust files in src/
    live-grep -c 5                     # Show 5 context lines
    live-grep -e "node_modules/"       # Exclude node_modules directory
    live-grep -n                       # Show line numbers in output
EOF
}

# Display version
show_version() {
    echo "live-grep version $VERSION"
}

# Format output based on settings
format_output() {
    if [ "$LINE_NUMBER" = true ]; then
        cut -d: -f1,2
    else
        cut -d: -f1
    fi
}

# Main process
main() {
    local pattern=""
    local depth=""
    local exclude=""
    local paths=()

    # Parse command line arguments
    while [[ $# -gt 0 ]]; do
        case $1 in
            -h|--help)
                show_help
                exit 0
                ;;
            -v|--version)
                show_version
                exit 0
                ;;
            -p|--pattern)
                pattern=$2
                shift 2
                ;;
            -d|--depth)
                depth=$2
                shift 2
                ;;
            -c|--context)
                PREVIEW_CONTEXT=$2
                shift 2
                ;;
            -e|--exclude)
                exclude=$2
                shift 2
                ;;
            -n|--line-number)
                LINE_NUMBER=true
                shift
                ;;
            *)
                paths+=("$1")
                shift
                ;;
        esac
    done

    # Check dependencies
    check_dependencies

    # Set search paths
    [ ${#paths[@]} -eq 0 ] && paths=(.)

    # Build ripgrep options
    local rg_opts=(
        --line-number
        --column
        --color always
        --smart-case
    )
    [ -n "$pattern" ] && rg_opts+=(--type-add "custom:$pattern" --type custom)
    [ -n "$depth" ] && rg_opts+=(--max-depth "$depth")
    [ -n "$exclude" ] && rg_opts+=(--glob "!$exclude")

    # Build search command
    search_cmd="rg ${rg_opts[*]}"

    # Execute fzf and process results
    # Define preview command with proper context value
    PREVIEW_CMD='file=$(echo {} | cut -d: -f1); \
                line=$(echo {} | cut -d: -f2); \
                if [ -n "$line" ]; then \
                    if [ "$line" -gt "'$PREVIEW_CONTEXT'" ]; then \
                        start=$((line - '$PREVIEW_CONTEXT')); \
                    else \
                        start=1; \
                    fi; \
                    end=$((line + '$PREVIEW_CONTEXT')); \
                    bat --style=numbers --color=always --highlight-line "$line" \
                        --line-range "$start:$end" "$file"; \
                fi'

    echo "" | \
    fzf \
        --delimiter=: \
        --preview "$PREVIEW_CMD" \
        --preview-window "right:50%" \
        --bind "change:reload($search_cmd {q} ${paths[*]} || true)" \
        --ansi \
        --disabled \
        --query "" \
        --height "80%" \
        --info inline \
        --border \
        --exit-0 | \
    format_output
}

main "$@"